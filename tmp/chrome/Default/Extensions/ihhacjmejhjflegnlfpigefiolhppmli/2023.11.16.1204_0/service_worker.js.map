{"version":3,"file":"service_worker.js","mappings":"iBAAA,IAAIA,EAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC1F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC7F,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,EAAQ,KAIjBO,KAAKR,EAAWK,EAAW,CAC7GH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,OAClE,GACJ,EAEAO,OAAOC,UACFC,iBAAiB,CAAEC,wBAAwB,IAC3CC,OAAOC,IACRC,QAAQD,MAAMA,EAAM,IAExB,WACI,OAAOxB,EAAUC,UAAM,OAAQ,GAAQ,YAEV,UADRkB,OAAOO,QAAQC,cACnBC,gBACHT,OAAOU,OAAOC,aAAa,CAAEC,KAAM,QAEjD,GACJ,CAEAC,GACKf,MAAK,SACLM,OAAM,SAEXJ,OAAOc,SAASC,UAAUC,aAAY,CAACC,EAASC,KAC5B,qBAAZD,GACAjB,OAAOmB,QAAQC,KAAKC,IAAI,CAAEC,mBAAoB,KAAM,KAChDtB,OAAOC,UAAUsB,KAAK,CAAEC,MAAON,aAAiC,EAASA,EAAIO,KAAM,QAAU,GAErG,IAEJzB,OAAOO,QAAQmB,kBAAkBV,aAAY,CAACW,EAASC,EAAQC,KAE3D,GAAkB,qCAAdD,EAAOH,GAGX,OAAe,MAAXE,IAGmB,gBAAnBA,EAAQjB,OACRV,OAAOU,OAAOoB,iBAAiBC,IACtBA,EAASC,aAEVH,GAAa,EACjB,IAGoB,iBAAnBF,EAAQjB,QACbV,OAAOC,UAAUsB,KAAK,CAAEC,MAAOG,EAAQH,QAAS,UAE7C,EAAI,G,IClDK","sources":["webpack://metamate/./src/service_worker.ts","webpack://metamate/webpack/startup"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// Configure side panel\nchrome.sidePanel\n    .setPanelBehavior({ openPanelOnActionClick: true })\n    .catch((error) => {\n    console.error(error);\n});\nfunction updateBadge() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const manifest = chrome.runtime.getManifest();\n        if (manifest.version === \"0.0.1\") {\n            yield chrome.action.setBadgeText({ text: \"dev\" });\n        }\n    });\n}\n// Set a \"dev\" badge for local development\nupdateBadge()\n    .then(() => { })\n    .catch(() => { });\n// Shortcut for starting new conversation\nchrome.commands.onCommand.addListener((command, tab) => {\n    if (command === \"new-conversation\") {\n        chrome.storage.sync.set({ lastConversationId: \"\" }, () => {\n            chrome.sidePanel.open({ tabId: tab === null || tab === void 0 ? void 0 : tab.id }, () => { });\n        });\n    }\n});\nchrome.runtime.onMessageExternal.addListener((message, sender, sendResponse) => {\n    // We only trust Intern New Tab\n    if (sender.id !== \"dknnomgapcoljkkjdkdimdgbmfnmfmjg\") {\n        return;\n    }\n    if (message == null) {\n        return false;\n    }\n    if (message.action === \"IsInstalled\") {\n        chrome.action.getUserSettings((settings) => {\n            if (!settings.isOnToolbar) {\n                // @ts-expect-error this type hint is incorrect.\n                sendResponse(true);\n            }\n        });\n    }\n    else if (message.action === \"OpenMetamate\") {\n        chrome.sidePanel.open({ tabId: message.tabId }, () => { });\n    }\n    return true;\n});\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[377]();\n"],"names":["__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","chrome","sidePanel","setPanelBehavior","openPanelOnActionClick","catch","error","console","runtime","getManifest","version","action","setBadgeText","text","updateBadge","commands","onCommand","addListener","command","tab","storage","sync","set","lastConversationId","open","tabId","id","onMessageExternal","message","sender","sendResponse","getUserSettings","settings","isOnToolbar"],"sourceRoot":""}
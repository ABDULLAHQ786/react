{"version":3,"file":"static/js/background.js","mappings":"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","sources":["views/Popup/graphql/LocalStorage.js","views/Popup/graphql/getInternURL.js","views/Popup/graphql/genCSRFToken.js","views/Popup/graphql/xhr.js","views/Popup/graphql/GraphQL.js","views/Popup/graphql/genLog.js","background.js","views/Popup/graphql/PersistentDocumentIds.js"],"sourcesContent":["/* global chrome */\n\nimport {TOPIC_FIELD_LOCAL_KEY, GOAL_FIELD_LOCAL_KEY} from '../util/LocalDataStoreKeys.js';\n\nexport function genv(keys) {\n  return new Promise(resolve => chrome.storage.local.get(keys, resolve));\n}\n\nexport async function gen(key) {\n  const items = await genv([key]);\n  return items[key];\n}\n\nexport function genSetObject(obj) {\n  return new Promise(resolve => chrome.storage.local.set(obj, resolve));\n}\n\nexport async function genSet(key, value) {\n  return await genSetObject({[key]: value});\n}\n\nexport function genClear(keys) {\n  return new Promise(resolve => chrome.storage.local.remove(keys, resolve));\n}\n\nexport function genClearTextAreaContent() {\n  return genClear([TOPIC_FIELD_LOCAL_KEY, GOAL_FIELD_LOCAL_KEY]);\n}\n\nexport function load(key, callback) {\n  const onloadTime = Math.floor(Date.now() / 1000);\n  gen(key).then(stored => {\n    const data = (stored == null || stored.expiration < onloadTime) ? null : stored.data;\n    if(data != null) {\n      callback(data);\n    }\n  });\n}\n\nexport function persist(key, data, timeout) {\n  const now = Math.floor(Date.now() / 1000);\n  genSet(key, {data, expiration: now + timeout});\n}\n","export default function getInternURL(path) {\n  return 'https://internalfb.com/intern' + path;\n}\n","import {gen, genSet} from './LocalStorage.js';\nimport getInternURL from './getInternURL.js';\n\nconst CSRF = getInternURL('/api/dtsg/internal');\nconst CSRF_KEY = 'oneoneext/settings/csrftoken/v1';\n\nasync function _genCSRFToken() {\n  const item = await gen(CSRF_KEY);\n  const now = Date.now() / 1000 + 60;\n  if (item != null && item.expire >= now) {\n    return item.token;\n  }\n  const response = await fetch(CSRF);\n  if (response.status !== 200) {\n    console.warn('Failed GraphQL fetch. Status Code: ' + response.status);\n    return null;\n  }\n  const text = await response.text();\n  if (text == null) {\n    console.warn('Failed to get CSRF token');\n    return null;\n  }\n  const token = JSON.parse(text.slice(9));\n  await genSet(CSRF_KEY, token);\n  return token.token;\n}\n\n// memoize up to 2hrs so we only send one csrf request at a time\nlet _memo = null;\nlet _memoTime = null;\nexport default function() {\n  const now = Date.now() / 1000;\n  if (_memo === null || _memoTime <= now) {\n    _memo = _genCSRFToken(CSRF_KEY);\n    _memoTime = now + 7200;\n  }\n  return _memo;\n}\n","// Can't use fetch() API since it sets the Origin header wrong :(\nexport default function xhr(url, formData) {\n  return new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n\n    xhr.open('POST', url);\n\n    xhr.responseType = '';\n\n    xhr.onerror = function() {\n      reject(new Error('error'));\n    };\n\n    xhr.onload = function() {\n      // do something with response\n      let res = xhr.response;\n      resolve(res);\n    };\n\n    // send request\n    xhr.send(formData);\n  });\n}\n","/**\n * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.\n *\n * @flow strict\n * @format\n * @oncall manager_products\n */\n\nimport genCSRFToken from './genCSRFToken.js';\nimport { gen, genv, genClear } from './LocalStorage.js';\nimport xhr from './xhr.js';\nimport getInternURL from './getInternURL.js';\n\ndeclare var chrome;\n\nexport function genGraphQL(\n  fbid: string,\n  variables?: { ... }\n): Promise<any> {\n  return genCSRFToken()\n    .then(csrf => {\n      let url = getInternURL('/api/graphql?doc_id=' + fbid);\n      if (variables) {\n        url += '&variables=' + encodeURIComponent(JSON.stringify(variables));\n      }\n      url += '&fb_dtsg=' + csrf + '&__a=1';\n      return xhr(url);\n    })\n    .then(response => {\n      let json = {};\n      try {\n        json = JSON.parse(response);\n      } catch {\n        console.warn(\n          `Failed GraphQL fetch (DocID: ${fbid}). Error: %s`,\n          response\n        );\n        return null;\n      }\n      if (json.error) {\n        console.warn('Failed GraphQL fetch. Status Code: ' + json.error);\n        return null;\n      }\n      return json != null ? json.data : null;\n    });\n}\n\nexport async function genAsyncGraphQL(\n  fbid: string,\n  variables: { ... }\n): Promise<any> {\n  return genCSRFToken()\n    .then(csrf => {\n      let url = getInternURL('/api/graphql?doc_id=' + fbid);\n      if (variables) {\n        url += '&variables=' + encodeURIComponent(JSON.stringify(variables));\n      }\n      url += '&fb_dtsg=' + csrf + '&__a=1';\n      return xhr(url);\n    })\n    .then(response => {\n      let json = {};\n      try {\n        json = JSON.parse(response);\n      } catch {\n        console.warn(\n          `Failed GraphQL fetch (DocID: ${fbid}). Error: %s`,\n          response\n        );\n        return null;\n      }\n      if (json.error) {\n        console.warn('Failed GraphQL fetch. Status Code: ' + json.error);\n        return null;\n      }\n      return json != null ? json.data : null;\n    });\n}\n\nconst KEY_ROOT = 'oneoneext/cached_graphql/v2/';\n\nexport async function cleanup(forceClear: boolean) {\n  if (forceClear) {\n    console.log('Forcing clear of local cache');\n  }\n  const items = await genv(null);\n  const now = Math.floor(Date.now() / 1000);\n  const weekAgo = now - 86400 * 7;\n  const keysToRemove = [];\n  for (let key in items) {\n    if (key.startsWith(KEY_ROOT)) {\n      // Remove keys expired a week ago to keep storage clean\n      const item = items[key];\n      if (forceClear || item.expiration < weekAgo) {\n        keysToRemove.push(key);\n      }\n    } else if (!key.startsWith('oneoneext/settings/')) {\n      keysToRemove.push(key);\n    }\n  }\n  if (keysToRemove.length > 0) {\n    await genClear(keysToRemove);\n  }\n}\n\nexport function genCachedGraphQL(\n  fbid: string,\n  variables: { ... },\n  timeout: number,\n  cb: (any, boolean) => mixed\n) {\n  let key = KEY_ROOT + fbid;\n  if (variables) {\n    key += JSON.stringify(variables);\n  }\n  const now = Math.floor(Date.now() / 1000);\n  gen(key).then(data => {\n    function _gen() {\n      return genGraphQL(fbid, variables).then(payload => {\n        if (payload == null) {\n          // just keep the old data for now\n          return;\n        }\n        const data = {\n          payload,\n          expiration: now + (timeout || 86400)\n        };\n        chrome.storage.local.set({ [key]: data });\n        cb(payload, false);\n      });\n    }\n    if (data != null) {\n      cb(data.payload, true);\n    }\n    if (data == null || data.expiration < now) {\n      _gen();\n    }\n  });\n}\n","/**\n * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.\n *\n * @flow strict\n * @format\n * @oncall manager_products\n */\n\nimport { genGraphQL } from './GraphQL.js';\nimport { LOG_EVENT_MUTATION } from './PersistentDocumentIds';\n\ndeclare var chrome;\nconst version = chrome.runtime.getManifest().version;\n\ntype KeyValuePayload = {|\n  key: string,\n  value: string\n|};\n\ntype Props = {|\n  event: string,\n  action?: ?string,\n  payload?: $ReadOnlyArray<KeyValuePayload>\n|};\n\nexport default function genLog({ event, action, payload }: Props) {\n  genGraphQL(LOG_EVENT_MUTATION, {\n    input: { event, action, version, log_payload: payload }\n  });\n}\n","/**\n * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.\n *\n * @flow strict\n * @format\n * @oncall manager_products\n */\n\nimport {\n  CAN_SHOW_NOTIFICATION_UPSELL,\n  MARK_NUX_AS_SEEN_MUTATION\n} from './views/Popup/graphql/PersistentDocumentIds';\nimport { genAsyncGraphQL } from './views/Popup/graphql/GraphQL';\nimport genLog from './views/Popup/graphql/genLog';\n\ndeclare var chrome;\n\nconst ROOMS_REGX = /fb\\.workplace\\.com\\/groupcall\\/LINK:([a-z]+)/;\n\nchrome.runtime.onInstalled.addListener(details => {\n  // fire off a an event after a successful install.\n  genLog({ event: 'IA_ACTION_ONE_ONE_CHROME_EXTENSION_INSTALLED' });\n});\n\nfunction maybeShowUpsellNotification(url: string) {\n  if (url == null) {\n    return;\n  }\n  const matches = url.match(ROOMS_REGX);\n  if (matches == null) {\n    return;\n  }\n  const meetingHash = matches[1];\n  if (meetingHash == null) {\n    return;\n  }\n  genAsyncGraphQL(CAN_SHOW_NOTIFICATION_UPSELL, { uri: url }).then(data => {\n    if (data?.one_one_extension_root?.can_show_notification_upsell) {\n      chrome.notifications.create('upsell', {\n        iconUrl: '1_1.png',\n        title: 'Try the 1:1 Tool!',\n        message:\n          'Hit Alt+Shift+O to take notes in a shared agenda during your 1:1 with this person.',\n        type: 'basic'\n      });\n      genAsyncGraphQL(MARK_NUX_AS_SEEN_MUTATION, {\n        input: {\n          nux_type: 'ONE_ONE_CHROME_EXTENSION_NOTIFICATION_UPSELL'\n        }\n      });\n    }\n  });\n}\n\n/**\n * Listen to when a tab is activated.\n * If it's a Workplace Room, we check if that Room is a 1:1 via GraphQL call\n * If so, we'll display a notification upsell to use 1:1 Rooms extension\n */\nchrome.tabs.onActivated.addListener(function(activeInfo: Object) {\n  const tabId = activeInfo?.tabId;\n  if (tabId == null) {\n    return;\n  }\n  chrome.tabs.get(tabId, function(tab: Object) {\n    const url = tab?.url || tab?.pendingUrl;\n    if (url == null) {\n      return;\n    }\n    maybeShowUpsellNotification(url);\n  });\n});\n","export const ROOT_QUERY = '4304921872963104';\n\nexport const ADD_TOPIC_MUTATION = '2899292513453183';\n\nexport const LOG_EVENT_MUTATION = '2898669936911188';\n\nexport const CAN_SHOW_NOTIFICATION_UPSELL = '4590842820927092';\n\nexport const MARK_NUX_AS_SEEN_MUTATION = '2841564069287171';\nexport const UNMARK_NUX_AS_SEEN_MUTATION = '2741114005993962';\n\nexport const GOALS_QUERY = '4486364878137189';\nexport const GOALS_CREATE_MUTATION = '4589470477831753';\n"],"names":["async","gen","key","keys","Promise","resolve","chrome","storage","local","get","genSet","value","obj","set","getInternURL","path","CSRF","CSRF_KEY","_memo","_memoTime","now","Date","item","expire","token","response","fetch","status","console","warn","text","JSON","parse","slice","_genCSRFToken","xhr","url","formData","reject","XMLHttpRequest","open","responseType","onerror","Error","onload","res","send","genGraphQL","fbid","variables","genCSRFToken","then","csrf","encodeURIComponent","stringify","json","error","data","genAsyncGraphQL","version","runtime","getManifest","ROOMS_REGX","onInstalled","addListener","details","_ref","event","action","payload","input","log_payload","genLog","tabs","onActivated","activeInfo","tabId","tab","pendingUrl","matches","match","uri","_data$one_one_extensi","one_one_extension_root","can_show_notification_upsell","notifications","create","iconUrl","title","message","type","nux_type","maybeShowUpsellNotification"],"sourceRoot":""}
{"version":3,"file":"src/serviceWorker.js","mappings":"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","sources":["webpack://tool-consolidation/./src/graphql/PersistentDocumentIds.js","webpack://tool-consolidation/./src/graphql/LocalStorage.js","webpack://tool-consolidation/./src/graphql/getInternURL.js","webpack://tool-consolidation/./src/graphql/Config.js","webpack://tool-consolidation/./src/graphql/genCSRFToken.js","webpack://tool-consolidation/./src/graphql/GraphQL.js","webpack://tool-consolidation/./src/graphql/xhr.js","webpack://tool-consolidation/./src/constants.ts","webpack://tool-consolidation/./src/utils.ts","webpack://tool-consolidation/./src/serviceWorker.ts","webpack://tool-consolidation/./src/logging.ts"],"sourcesContent":["/**\n * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.\n *\n * @format\n * @oncall ep_tool_consolidation\n */\n\nexport const JUSTKNOBS_EVAL_QUERY = '8105108896210480';\nexport const QUIP_ASSET_QUERY = '6587188887985110';\nexport const DROPBOX_URL_QUERY = '25608122958833765';\nexport const TC_EVENT_LOG_MUTATION = '7524441461015054';\nexport const TC_SSO_PERMISSION_GROUP_QUERY = '7570658543040059';\nexport const TC_CURRENT_VIEWER_QUERY = '2225174527520692';\n","export function genv(keys) {\n  return new Promise(resolve => chrome.storage.local.get(keys, resolve));\n}\n\nexport async function gen(key) {\n  const items = await genv([key]);\n  return items[key];\n}\n\nexport function genSetObject(obj) {\n  return new Promise(resolve => chrome.storage.local.set(obj, resolve));\n}\n\nexport async function genSet(key, value) {\n  return genSetObject({[key]: value});\n}\n\nexport function genClear(keys) {\n  return new Promise(resolve => chrome.storage.local.remove(keys, resolve));\n}\n\nexport function load(key, callback) {\n  const onloadTime = Math.floor(Date.now() / 1000);\n  gen(key).then(stored => {\n    const data =\n      stored == null || stored.expiration < onloadTime ? null : stored.data;\n    if (data != null) {\n      callback(data);\n    }\n  });\n}\n\nexport function persist(key, data, timeout) {\n  const now = Math.floor(Date.now() / 1000);\n  genSet(key, {data, expiration: now + timeout});\n}\n","export default function getInternURL(path) {\n  return `https://internalfb.com/intern${path}`;\n}\n","const PROJECT_NAME = 'tool_consolidation';\n\nexport const GRAPHQL_KEY_ROOT = `${PROJECT_NAME}/cached_graphql/v2/`;\nexport const CSRF_KEY = `${PROJECT_NAME}/settings/csrftoken/v1`;\nexport const GRAPHQL_CLEAR_SETTINGS = `${PROJECT_NAME}/settings/`;\n","import {gen, genSet} from './LocalStorage.js';\nimport getInternURL from './getInternURL.js';\nimport {CSRF_KEY} from './Config.js';\n\nconst CSRF = getInternURL('/api/dtsg/internal');\n\nasync function _genCSRFToken() {\n  const item = await gen(CSRF_KEY);\n  const now = Date.now() / 1000 + 60;\n  if (item != null && item.expire >= now) {\n    return item.token;\n  }\n  const response = await fetch(CSRF);\n  if (response.status !== 200) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed GraphQL fetch. Status Code: ${response.status}`);\n    return null;\n  }\n  const text = await response.text();\n  if (text == null) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to get CSRF token');\n    return null;\n  }\n  const token = JSON.parse(text.slice(9));\n  await genSet(CSRF_KEY, token);\n  return token.token;\n}\n\n// memoize up to 2hrs so we only send one csrf request at a time\nlet _memo = null;\nlet _memoTime = null;\nexport default function () {\n  const now = Date.now() / 1000;\n  if (_memo === null || _memoTime <= now) {\n    _memo = _genCSRFToken(CSRF_KEY);\n    _memoTime = now + 7200;\n  }\n  return _memo;\n}\n","/**\n * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.\n *\n * @flow strict\n * @format\n * @oncall ep_tool_consolidation\n */\n\nimport genCSRFToken from './genCSRFToken.js';\nimport {gen, genv, genClear} from './LocalStorage.js';\nimport xhr from './xhr.js';\nimport getInternURL from './getInternURL.js';\n\nimport {GRAPHQL_KEY_ROOT} from './Config.js';\n\nexport function genGraphQL(fbid, variables) {\n  return genCSRFToken()\n    .then(csrf => {\n      let url = getInternURL(`/api/graphql?doc_id=${fbid}`);\n      if (variables) {\n        url += `&variables=${encodeURIComponent(JSON.stringify(variables))}`;\n      }\n      url += `&fb_dtsg=${csrf}&__a=1`;\n      return xhr(url);\n    })\n    .then(response => {\n      const json = JSON.parse(response);\n      if (json.error) {\n        // eslint-disable-next-line no-console\n        console.warn(`Failed GraphQL fetch. Status Code: ${json.error}`);\n        return null;\n      }\n      return json != null ? json.data : null;\n    });\n}\n\nexport async function cleanup(forceClear) {\n  const items = await genv(null);\n  const now = Math.floor(Date.now() / 1000);\n  const weekAgo = now - 86400 * 7;\n  const keysToRemove = [];\n  for (const key in items) {\n    if (key.startsWith(GRAPHQL_KEY_ROOT)) {\n      // Remove keys expired a week ago to keep storage clean\n      const item = items[key];\n      if (forceClear || item.expiration < weekAgo) {\n        keysToRemove.push(key);\n      }\n    } else if (!key.startsWith()) {\n      keysToRemove.push(key);\n    }\n  }\n  if (keysToRemove.length > 0) {\n    await genClear(keysToRemove);\n  }\n}\n\nexport function genCachedGraphQL(fbid, variables, timeout, cb) {\n  let key = GRAPHQL_KEY_ROOT + fbid;\n  if (variables) {\n    key += JSON.stringify(variables);\n  }\n  const now = Math.floor(Date.now() / 1000);\n  gen(key).then(data => {\n    function _gen() {\n      return genGraphQL(fbid, variables).then(payload => {\n        if (payload == null) {\n          // just keep the old data for now\n          return;\n        }\n        const data = {\n          payload,\n          expiration: now + (timeout || 86400),\n        };\n        chrome.storage.local.set({[key]: data});\n        cb(payload, false);\n      });\n    }\n    if (data != null) {\n      cb(data.payload, true);\n    }\n    if (data == null || data.expiration < now) {\n      _gen();\n    }\n  });\n}\n","export default async function xhr(url, formData) {\n  return fetch(url, {\n    method: 'POST',\n    body: formData,\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('error');\n      }\n      return response.body;\n    })\n    .then(body => {\n      const reader = body.getReader();\n      return new ReadableStream({\n        start(controller) {\n          // The following function handles each data chunk\n          const push = () => {\n            // \"done\" is a Boolean and value a \"Uint8Array\"\n            reader.read().then(({done, value}) => {\n              if (done) {\n                controller.close();\n                return;\n              }\n              // Get the data and send it to the browser via the controller\n              controller.enqueue(value);\n              push();\n            });\n          };\n          push();\n        },\n      });\n    })\n    .then(stream =>\n      new Response(stream, {\n        headers: {\n          'Content-Type': 'text/html',\n        },\n      }).text(),\n    );\n}\n","/**\n * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.\n *\n * @flow strict-local\n * @format\n * @oncall ep_tool_consolidation\n */\n\nexport const QUIP_IGNORED_PATHS = ['/all', '/browse', '/account'];\nexport const DROPBOX2GOOGLE_JUSTKNOBS =\n  'ep_tool_consolidation/common:dropbox2google_redirection';\nexport const QUIP_2_GOOGLE_SSO_JUSTKNOBS =\n  'ep_tool_consolidation/common:quip2google_redirection';\nexport const TOOL_CONSOLIDATION_QUIP_ACCESS_GROUP_ID = 1486838798588926;\n","/**\n * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.\n *\n * @format\n * @oncall ep_tool_consolidation\n */\n\nimport {\n  DROPBOX_URL_QUERY,\n  QUIP_ASSET_QUERY,\n  JUSTKNOBS_EVAL_QUERY,\n} from './graphql/PersistentDocumentIds';\nimport {QUIP_IGNORED_PATHS} from './constants';\nimport {genGraphQL} from './graphql/GraphQL.js';\n\nexport function isQuipURL(url: string): boolean {\n  const quipRegex = new RegExp('^[A-Za-z]+://fb.quip.com/[A-Za-z0-9]+', 'gs');\n  return quipRegex.test(url);\n}\n\nexport function isDropboxURL(url: string): boolean {\n  // Dropbox shared URLs can be in the form of:\n  // https://www.dropbox.com/s/foo/bar\n  // https://www.dropbox.com/scl/foo/bar\n  // One case needs to be handled additionally is when\n  // user gets redirected to SSO login page like below\n  // https://www.dropbox.com/sso?cont=foo%2Fbar\n  const dropboxRegex = new RegExp(\n    '^[A-Za-z]+://www.dropbox.com/s[cl|so]*[/\\\\?].+',\n    'gs',\n  );\n  return dropboxRegex.test(url);\n}\n\n// When user is not logged in or no longer has access to the Dropbox,\n// Dropbox redirects users to the SSO login page. Need to extract the\n// destination URL from the redirect URL\nexport function getCleanDropboxURL(url: string): string {\n  if (!isDropboxURL(url)) {\n    return url;\n  }\n  const ssoRedirectUrlRegex = /cont=([A-Za-z0-9-%_\\.]+)&*/;\n  const ssoMatch = url.match(ssoRedirectUrlRegex);\n  if (ssoMatch != null && ssoMatch.length > 1) {\n    return 'https://www.dropbox.com' + decodeURIComponent(ssoMatch[1]);\n  }\n  return url;\n}\n\n// QUIP_ASSET_QUERY requires only the Quip document ID as the ID while\n// DROPBOX_URL_QUERY requires the full URL as the ID\nexport function getGraphQLIdParamFromURL(\n  rawUrl: string,\n  query: string,\n): string | null {\n  switch (query) {\n    case QUIP_ASSET_QUERY:\n      const url = new URL(rawUrl);\n      return url.pathname.split('/')[1];\n    case DROPBOX_URL_QUERY:\n      return getCleanDropboxURL(rawUrl);\n    default:\n      return null;\n  }\n}\n\nexport async function genJustKnobsEvalBool(\n  name: string,\n): Promise<boolean | null> {\n  return new Promise((resolve, reject) =>\n    genGraphQL(JUSTKNOBS_EVAL_QUERY, {\n      name,\n    })\n      .then(res => resolve(res?.knob?.result))\n      .catch((error: string) => reject(new Error(error))),\n  );\n}\n\nexport function isUnauthorizedQuipURL(url: string): boolean {\n  const unauthorizedQuipRegex = new RegExp(\n    '^[A-Za-z]+://www.internalfb.com/intern/saml/.+fb_quip_1.+',\n    'gs',\n  );\n  return unauthorizedQuipRegex.test(url);\n}\n\n// https://developer.chrome.com/docs/extensions/reference/history/#method-search\nexport async function genSearchHistoryForQuipLink() {\n  let msPerMin = 1000 * 60;\n  let startTime = new Date().getTime() - msPerMin;\n  const promise = new Promise((resolve, _reject) =>\n    chrome.history.search(\n      {text: 'fb.quip.com', startTime: startTime, maxResults: 10},\n      historyResults => resolve(historyResults),\n    ),\n  );\n  const historyResults = await promise;\n  const historyResultsFiltered = historyResults.filter(\n    historyResult =>\n      isQuipURL(historyResult.url) &&\n      !QUIP_IGNORED_PATHS.some(path => historyResult.url?.includes(path)),\n  );\n  const historyItemsSorted = historyResultsFiltered.sort(\n    (first, second) => second.lastVisitTime - first.lastVisitTime,\n  );\n  return historyItemsSorted.length > 0 ? historyItemsSorted[0].url : null;\n}\n\nexport function isQuipRedirectLoginURL(url: string): boolean {\n  const quipRegex = new RegExp(\n    '^[A-Za-z]+://fb.quip.com/account/login.+',\n    'gs',\n  );\n  return quipRegex.test(url);\n}\n\nexport function getInternQuipRedirectionURL(urlString: string): string {\n  const url = new URL(urlString);\n  url.search = '';\n  url.hash = '';\n  return `https://www.internalfb.com/quip2google/redirect?url=${url.toString()}`;\n}\n","/**\n * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.\n *\n * @format\n * @oncall ep_tool_consolidation\n */\n\nimport type {TSystemType} from './logging';\n\nimport {\n  QUIP_ASSET_QUERY,\n  DROPBOX_URL_QUERY,\n  TC_SSO_PERMISSION_GROUP_QUERY,\n  TC_CURRENT_VIEWER_QUERY,\n} from './graphql/PersistentDocumentIds.js';\nimport {genGraphQL, genCachedGraphQL} from './graphql/GraphQL.js';\nimport {\n  isQuipRedirectLoginURL,\n  isQuipURL,\n  isDropboxURL,\n  getGraphQLIdParamFromURL,\n  getInternQuipRedirectionURL,\n  genJustKnobsEvalBool,\n  isUnauthorizedQuipURL,\n  genSearchHistoryForQuipLink,\n} from './utils';\nimport {\n  QUIP_IGNORED_PATHS,\n  DROPBOX2GOOGLE_JUSTKNOBS,\n  QUIP_2_GOOGLE_SSO_JUSTKNOBS,\n  TOOL_CONSOLIDATION_QUIP_ACCESS_GROUP_ID,\n} from './constants';\nimport {genLog} from './logging';\n\nconst QUERY_TIMEOUT = 604800; // 7 days\n\nasync function genGoogleURL(\n  changeInfo:\n    | chrome.tabs.TabChangeInfo\n    | chrome.webRequest.WebRequestBodyDetails,\n  query: string,\n): Promise<string | null> {\n  if (changeInfo.url == null) {\n    return null;\n  }\n  const urlPathname = getGraphQLIdParamFromURL(changeInfo.url, query);\n  if (\n    urlPathname == null ||\n    urlPathname === '' ||\n    urlPathname.startsWith('-')\n  ) {\n    return null;\n  }\n  return new Promise((resolve, reject) =>\n    genGraphQL(query, {\n      id: urlPathname,\n    })\n      .then(res => {\n        switch (query) {\n          case QUIP_ASSET_QUERY:\n            resolve(res?.xfb_du_get_quip_asset_by_quip_id?.google_asset_link);\n            break;\n          case DROPBOX_URL_QUERY:\n            resolve(\n              res?.fetch__XFBToolConsolidationDropbox2Google?.google_drive_link,\n            );\n            break;\n          default:\n            resolve(null);\n            break;\n        }\n      })\n      .catch((error: string) => reject(new Error(error))),\n  );\n}\n\nasync function genCheckSSOMembership(\n  query: string,\n  userId: number,\n): Promise<boolean | null> {\n  return new Promise((resolve, reject) =>\n    genGraphQL(query, {\n      id: TOOL_CONSOLIDATION_QUIP_ACCESS_GROUP_ID,\n      user_id: userId,\n    })\n      .then(res => {\n        resolve(res?.fetch__PermissionGroup?.is_member);\n      })\n      .catch((error: string) => {\n        reject(new Error(error));\n      }),\n  );\n}\n\nasync function genCurrentUserFBID(): Promise<number | null> {\n  return new Promise(resolve =>\n    genCachedGraphQL(TC_CURRENT_VIEWER_QUERY, null, QUERY_TIMEOUT, data => {\n      let userId = null;\n      try {\n        const user = data.viewer.account_user.intern_user;\n        userId = user.unencoded_id;\n      } catch (e) {\n        console.error(e);\n      } finally {\n        resolve(userId);\n      }\n    }),\n  );\n}\n\nasync function genLogRedirection(\n  systemType: TSystemType,\n  originalUrl: string,\n  redirectUrl: string | null,\n  errorMsg: string | null,\n  extra_metadata: {} | null,\n) {\n  if (redirectUrl != null || errorMsg != null) {\n    await genLog(\n      systemType,\n      'PROD',\n      'REDIRECT',\n      JSON.stringify({\n        originalUrl,\n        redirectUrl,\n        ...extra_metadata,\n      }),\n      errorMsg == null\n        ? null\n        : {\n            message: errorMsg,\n            code: 1,\n          },\n    );\n  }\n}\n\nasync function handleQuipRedirection(\n  tabId: number,\n  changeInfo: chrome.tabs.TabChangeInfo,\n  quipURL: string,\n) {\n  let errorMsg: string | null = null;\n  const originalUrl = changeInfo.url;\n  let isSSOMember: boolean | null = null;\n  let currentUserFBID: number | null = null;\n  const redirectUrl = getInternQuipRedirectionURL(quipURL);\n  try {\n    const isEnabled = await genJustKnobsEvalBool(QUIP_2_GOOGLE_SSO_JUSTKNOBS);\n    if (!isEnabled) {\n      return;\n    }\n    currentUserFBID = await genCurrentUserFBID();\n    if (currentUserFBID != null) {\n      isSSOMember = await genCheckSSOMembership(\n        TC_SSO_PERMISSION_GROUP_QUERY,\n        currentUserFBID,\n      );\n      if (isSSOMember) {\n        return;\n      }\n    }\n    chrome.tabs.update(tabId, {url: redirectUrl});\n  } catch (e) {\n    errorMsg = e.message;\n  } finally {\n    await genLogRedirection('QUIP', originalUrl, redirectUrl, errorMsg, {\n      intern_user_id: currentUserFBID,\n      amp_group_id: TOOL_CONSOLIDATION_QUIP_ACCESS_GROUP_ID,\n      is_member: isSSOMember,\n    });\n  }\n}\n\nasync function handleDropboxRedirection(\n  tabId: number,\n  changeInfo: chrome.tabs.TabChangeInfo,\n) {\n  const isEnabled = await genJustKnobsEvalBool(DROPBOX2GOOGLE_JUSTKNOBS);\n  if (!isEnabled) {\n    return;\n  }\n  let errorMsg: string | null = null;\n  const originalUrl = changeInfo.url;\n  const redirectUrl = await genGoogleURL(changeInfo, DROPBOX_URL_QUERY);\n  try {\n    chrome.tabs.update(tabId, {url: redirectUrl});\n  } catch (e) {\n    errorMsg = e.message;\n  } finally {\n    await genLogRedirection('DROPBOX', originalUrl, redirectUrl, errorMsg, {});\n  }\n}\n\nchrome.tabs.onUpdated.addListener(async (tabId, changeInfo) => {\n  const {url} = changeInfo;\n  if (url == null) {\n    return;\n  }\n  if (isQuipURL(url)) {\n    if (isQuipRedirectLoginURL(url)) {\n      // When landed on Quip login page\n      const urlObj = new URL(url);\n      let quipURL = urlObj.searchParams.get('next');\n      if (quipURL == null) {\n        return;\n      }\n      await handleQuipRedirection(tabId, changeInfo, quipURL);\n    } else if (!QUIP_IGNORED_PATHS.some(path => url?.includes(path))) {\n      const redirectUrl = (await genGoogleURL(\n        changeInfo,\n        QUIP_ASSET_QUERY,\n      )) as string;\n      await chrome.tabs.sendMessage(tabId, {url: redirectUrl});\n    } else {\n      await chrome.tabs.sendMessage(tabId, {url: null});\n    }\n  } else if (isUnauthorizedQuipURL(url)) {\n    // When landed on Quip SSO page\n    const quipURL = await genSearchHistoryForQuipLink();\n    if (quipURL == null) {\n      return;\n    }\n    await handleQuipRedirection(tabId, changeInfo, quipURL);\n  } else if (isDropboxURL(url)) {\n    await handleDropboxRedirection(tabId, changeInfo);\n  }\n});\n\nchrome.webNavigation.onCompleted.addListener(\n  changeInfo => {\n    let googleUrl: string | null = null;\n    let tab: chrome.tabs.Tab | null = null;\n    new Promise(async () => {\n      googleUrl = (await genGoogleURL(changeInfo, QUIP_ASSET_QUERY)) as string;\n      [tab] = await chrome.tabs.query({\n        active: true,\n        lastFocusedWindow: true,\n      });\n      if (tab == null || tab.id == null) {\n        return;\n      }\n      await chrome.tabs.sendMessage(tab.id, {url: googleUrl});\n    });\n  },\n  {url: [{hostContains: 'fb.quip.com'}]},\n);\n\nchrome.webRequest.onBeforeRedirect.addListener(\n  details => {\n    // We capture the redirect navigation history here.\n    const url = details.url;\n    if (isQuipURL(url)) {\n      chrome.history.addUrl({url: url});\n    }\n  },\n  {urls: ['<all_urls>']},\n  [],\n);\n","/**\n * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.\n *\n * @format\n * @oncall ep_tool_consolidation\n */\n\nimport {TC_EVENT_LOG_MUTATION} from './graphql/PersistentDocumentIds';\nimport {genGraphQL} from './graphql/GraphQL.js';\n\nexport type TSystemType = 'DROPBOX' | 'QUIP';\ntype TSystemEnvironment = 'PROD' | 'TEST';\ntype TLoggerEvent = 'GET' | 'REDIRECT';\ntype TEventLoggerException = {\n  message: string;\n  code: number;\n};\n\nexport async function genLog(\n  systemType: TSystemType,\n  systemEnvironment: TSystemEnvironment,\n  eventType: TLoggerEvent,\n  extraMetadata: string | null = null,\n  exception: TEventLoggerException | null = null,\n): Promise<string | null> {\n  return new Promise((resolve, reject) =>\n    genGraphQL(TC_EVENT_LOG_MUTATION, {\n      logger_input: {\n        system_environment: systemEnvironment,\n        event_type: eventType,\n        system_type: systemType,\n        extra_metadata: extraMetadata,\n        exception,\n      },\n    })\n      .then(res => {\n        const eventRes = res?.xfb_tc_log_event;\n        if (eventRes != null) {\n          reject(new Error(eventRes));\n        }\n        resolve(eventRes);\n      })\n      .catch((error: string) => reject(new Error(error))),\n  );\n}\n"],"names":["JUSTKNOBS_EVAL_QUERY","QUIP_ASSET_QUERY","DROPBOX_URL_QUERY","TC_EVENT_LOG_MUTATION","TC_CURRENT_VIEWER_QUERY","async","gen","key","keys","Promise","resolve","chrome","storage","local","get","getInternURL","path","PROJECT_NAME","GRAPHQL_KEY_ROOT","CSRF_KEY","CSRF","_memo","_memoTime","now","Date","item","expire","token","response","fetch","status","console","warn","text","JSON","parse","slice","value","obj","set","genSet","_genCSRFToken","genGraphQL","fbid","variables","genCSRFToken","then","csrf","url","encodeURIComponent","stringify","formData","method","body","xhr","ok","Error","reader","getReader","ReadableStream","start","controller","push","read","done","close","enqueue","stream","Response","headers","json","error","data","QUIP_IGNORED_PATHS","TOOL_CONSOLIDATION_QUIP_ACCESS_GROUP_ID","isQuipURL","RegExp","test","isDropboxURL","genJustKnobsEvalBool","name","reject","res","_res$knob","knob","result","catch","QUERY_TIMEOUT","genGoogleURL","changeInfo","query","urlPathname","rawUrl","URL","pathname","split","ssoMatch","match","length","decodeURIComponent","getCleanDropboxURL","getGraphQLIdParamFromURL","startsWith","id","_res$xfb_du_get_quip_","_res$fetch__XFBToolCo","xfb_du_get_quip_asset_by_quip_id","google_asset_link","fetch__XFBToolConsolidationDropbox2Google","google_drive_link","genLogRedirection","systemType","originalUrl","redirectUrl","errorMsg","extra_metadata","systemEnvironment","eventType","extraMetadata","exception","logger_input","system_environment","event_type","system_type","eventRes","xfb_tc_log_event","genLog","message","code","handleQuipRedirection","tabId","quipURL","isSSOMember","currentUserFBID","urlString","search","hash","toString","getInternQuipRedirectionURL","timeout","cb","Math","floor","payload","expiration","genCachedGraphQL","userId","viewer","account_user","intern_user","unencoded_id","e","genCurrentUserFBID","user_id","_res$fetch__Permissio","fetch__PermissionGroup","is_member","genCheckSSOMembership","tabs","update","intern_user_id","amp_group_id","onUpdated","addListener","isQuipRedirectLoginURL","searchParams","some","includes","sendMessage","isUnauthorizedQuipURL","startTime","getTime","promise","_reject","history","maxResults","historyResults","historyItemsSorted","filter","historyResult","_historyResult$url","sort","first","second","lastVisitTime","genSearchHistoryForQuipLink","handleDropboxRedirection","webNavigation","onCompleted","googleUrl","tab","active","lastFocusedWindow","hostContains","webRequest","onBeforeRedirect","details","addUrl","urls"],"sourceRoot":""}